#  Source for generic VME readout using a
#  TJNAF trigger supervisor interface register (TIR)
#  as a source for external interrupts
#
#    David Abbott, TJNAF 1996

readout list VME1
maximum 1024,500
polling
vme readout
#ts control

const TIR_ADDR = 0x0ed0

unsigned long laddr;
extern int bigendian_out;

%%
#define UINT32 unsigned int
#define UINT16 unsigned short
#include "../vmeDSClib.h"
%%

begin download

  variable res

# If the ROC is sending data to Little-Endian EB
# e.g. a x86 Linux CPU then bigendian_out = 0.
# Unless the ROC is also running on a Little-Endian
# machine. Then set bigendian_out=1.
  bigendian_out = 0;


# Setup TIR
  tirInit(TIR_ADDR);

%%
  dscInit(0xbe0000,0,1);
  dscStatus(0,0);

  dscSetThreshold(0,0,550,TDCTRG);
  dscSetThreshold(0,14,750,TDCTRG);
  dscSetThreshold(0,15,750,TDCTRG);
  dscSetChannelMask(0,0xffff,TRG);
  dscSetChannelMask(0,0xffff,TDC);
  dscSetChannelORMask(0,0xffff,TDCTRG);

%%

  
  log inform "User Download Executed"

end download
    
begin prestart

  log inform "Entering User Prestart"

  init trig source VME
  link sync trig source VME 1 to usrtrig and usrtrig_done
  event type 1 then read VME 1

  log inform "User Prestart Executed"

end prestart

begin end

  CDODISABLE(VME,1,0);

  dscStatus(0,0);

  log inform "User End Executed"

end end

begin pause

  CDODISABLE(VME,1,0);

  log inform "User Pause Executed"

end pause

begin go
  
  log inform "Entering User Go"

  dscLatchScalers(0,2); /* equiv to a clear */
  
  CDOENABLE(VME,1,0);

end go

begin trigger usrtrig
 
variable ii, event_ty, event_no, nwords

%%
  tir[1]->tir_oport=1;
%%

 event_ty = EVTYPE;
 event_no = *rol->nevents;

 rol->dabufp = (long *) 0;
 open event type EVTYPE of BT_UI4

%%
 *rol->dabufp++ = 0xffdaf000;
 *rol->dabufp++ = event_ty;

  /* Insert some data here */
  dscLatchScalers(0,2); /* latch both scalers */
  nwords = dscReadScalers(0,rol->dabufp,20,DSC_READOUT_TRGVME|DSC_READOUT_REF|DSC_READOUT_REFVME);
  rol->dabufp+=nwords;

  *rol->dabufp++ = 0xd00dd00d; /* Event EOB */
 

%%
 close event

%%
  tir[1]->tir_oport=0;
%%

end trigger

begin done usrtrig

end done


begin done

# Acknowledge tir register
  CDOACK(VME,1,0);

end done

begin status

end status


